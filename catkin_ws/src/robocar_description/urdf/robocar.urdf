<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="robocar">

  <xacro:property name='width' value='0.2' />
  <xacro:property name='length' value='0.4' />
  <xacro:property name='height' value='0.1' />
  <xacro:property name='wheel_radius' value='0.05' />
  <xacro:property name='wheel_width' value='0.05' />

  <xacro:macro name="box_inertial" params="mass length width height">
  <inertial>
    <mass value="${mass}" />
    <!-- <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1" /> -->
    <inertia ixx="${mass*(height*height+width*width)/12}" ixy="0.0" ixz="0.0" iyy="${mass*(length*length+width*width)/12}" iyz="0.0" izz="${mass*(length*length+height*height)/12}" />    
  </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertial" params="mass height radius">
  <inertial>
    <mass value="${mass}" />
    <!-- <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1" /> -->
    <inertia ixx="${mass*(height*height+3*radius*radius)/12}" ixy="0.0" ixz="0.0" iyy="${mass*(height*height+3*radius*radius)/12}" iyz="0.0" izz="${mass*(radius*radius)/2}" />   
  </inertial>
  </xacro:macro>

  <material name="blue">
    <color rgba="0 0 0.8 1"/>
  </material>

  <material name="red">
    <color rgba="0.8 0 0 1"/>
  </material>

  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>

  <link name="base">
    <visual>
      <geometry>
        <box size="${length} ${width} ${height}"/>
      </geometry>
      <material name="white"/>
      <origin xyz="0 0 0"/>
    </visual>
    <collision>
      <origin xyz="0 0 0"/>
      <geometry>
        <box size="${length} ${width} ${height}"/>
      </geometry>
    </collision>
    <xacro:box_inertial mass="2" length="${length}" width="${width}" height="${height}"/>
  </link>

  <!-- Macro for ultra_sonics -->
  <xacro:macro name="ultra_sonic" params="prefix refl center">
  <joint name="${prefix}_ultra_sonic_joint" type="fixed">
    <parent link="base"/>
    <child link="${prefix}_ultra_sonic"/>
    <origin rpy="0 0 0" xyz="${length/2} ${refl*(width/6 + center*(width/3))} ${-height/2+0.01}"/>
    <!-- <origin rpy="0 0 ${0 + refl*center*1.57075/2}" xyz="${length/2} ${refl*(width/3 + center*(width/6))} ${-height/2+0.01}"/> -->
  </joint>

  <link name="${prefix}_ultra_sonic">
    <visual>
      <origin rpy="0 1.57075 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.02"/>
      </geometry>
      <material name="red"/>
    </visual>
    <collision>
      <origin rpy="0 1.57075 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.02" radius="0.02"/>
      </geometry>
    </collision>
    <xacro:cylinder_inertial mass="0.1" height="0.02" radius="0.02"/>
  </link>

  <!-- gazebo laser -->
  <gazebo reference="${prefix}_ultra_sonic">
    <sensor type="ray" name="${prefix}_ultra_sonic_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>40</update_rate>
      <ray>
         <scan>
            <horizontal>
               <samples>10</samples>
               <resolution>1</resolution> 
               <min_angle>-0.14835</min_angle>
               <max_angle>0.14835</max_angle>
            </horizontal>            
         </scan>
         <range>
            <min>0.02</min>
            <max>4</max>
            <resolution>0.3</resolution>
         </range>       
      </ray>
      <plugin name="${prefix}_ultra_sonic_controller" filename="libgazebo_ros_range.so">
        <topicName>/scan/${prefix}_ultra_sonic</topicName>
        <frameName>${prefix}_ultra_sonic</frameName>
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>40</updateRate>        
        <radiation>ULTRASOUND</radiation>
        <fov>0.2967</fov>
      </plugin>
    </sensor>
  </gazebo>
 
  </xacro:macro>

  <!-- Actual ultra_sonics -->
  <xacro:ultra_sonic prefix="right" refl="-1" center="1"/>
  <xacro:ultra_sonic prefix="right_center" refl="-1" center="0"/>
  <xacro:ultra_sonic prefix="left_center" refl="1" center="0"/>
  <xacro:ultra_sonic prefix="left" refl="1" center="1"/>
  
  <!-- Macro for wheels -->
  <xacro:macro name="wheel" params="prefix suffix refl_y">
  <joint name="${prefix}_${suffix}_wheel_joint" type="continuous">
    <parent link="${prefix}_wheel_axle"/>
    <child link="${prefix}_${suffix}_wheel"/>
    <axis xyz="0 1 0"/>
    <origin rpy="0 0 0" xyz="0 ${refl_y*(width+wheel_width)/2} 0"/>
  </joint>

  <link name="${prefix}_${suffix}_wheel">
    <visual>
      <origin rpy="1.57075 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
      </geometry>
      <material name="blue"/>
    </visual>
    <collision>
      <origin rpy="1.57075 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
      </geometry>
    </collision>
    <xacro:cylinder_inertial mass="0.5" height="${wheel_width}" radius="${wheel_radius}"/>
  </link>

  <!-- This block provides the simulator (Gazebo) with information on a few additional
  physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
  <gazebo reference="${prefix}_${suffix}_wheel">
    <mu1 value="200.0"/>
    <mu2 value="100.0"/>
    <kp value="10000000.0" />
    <kd value="1.0" />
    <material>Gazebo/Grey</material>
  </gazebo>

  <!-- This block connects the wheel joint to an actuator (motor), which informs both
  simulation and visualization of the robot -->
  <transmission name="${prefix}_${suffix}_wheel_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="${prefix}_${suffix}_wheel_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
    <joint name="${prefix}_${suffix}_wheel_joint">
      <hardwareInterface>VelocityJointInterface</hardwareInterface>
    </joint>
  </transmission>
  </xacro:macro>

  <!-- Macro for wheels axles with wheels -->
  <xacro:macro name="wheel_axle" params="prefix refl_x">  
  <joint name="${prefix}_wheel_axle_joint" type="fixed">
    <parent link="base"/>
    <child link="${prefix}_wheel_axle"/>    
    <origin xyz="${refl_x*(length/2-wheel_radius)} 0 ${-wheel_radius}" rpy="0 0 0"/>
  </joint>
  
  <link name="${prefix}_wheel_axle">
    <visual>
      <origin rpy="1.57075 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="${width+0.1}" radius="0.01"/>
      </geometry>
      <material name="blue"/>
    </visual>
    <collision>
      <origin rpy="1.57075 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="${width+0.1}" radius="0.01"/>
      </geometry>    
    </collision>
    <xacro:cylinder_inertial mass="0.05" height="${width+0.1}" radius="0.1"/>
  </link>
  <xacro:wheel prefix="${prefix}" suffix="right" refl_y="-1"/>
  <xacro:wheel prefix="${prefix}" suffix="left" refl_y="1"/>
  </xacro:macro>
  
  

  <!-- Actual wheels -->
  <xacro:wheel_axle prefix="front" refl_x="1"/>
  <xacro:wheel_axle prefix="back" refl_x="-1"/>

  <!-- Gazebo plugin for ROS Control -->
  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/</robotNamespace>
    </plugin>
    <plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>50.0</updateRate>
      <bodyName>base</bodyName>
      <topicName>robocar/map</topicName>
      <gaussianNoise>0.01</gaussianNoise>
      <frameName>world</frameName>
      <xyzOffsets>0 0 0</xyzOffsets>
      <rpyOffsets>0 0 0</rpyOffsets>
    </plugin>
  </gazebo>

</robot>